// source: api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var security_pb = require('./security_pb.js');
goog.object.extend(proto, security_pb);
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.didcomm.messaging.ConvertKeyRequest', null, global);
goog.exportSymbol('proto.didcomm.messaging.ConvertKeyResponse', null, global);
goog.exportSymbol('proto.didcomm.messaging.CreateProofRequest', null, global);
goog.exportSymbol('proto.didcomm.messaging.CreateProofResponse', null, global);
goog.exportSymbol('proto.didcomm.messaging.GenerateKeyRequest', null, global);
goog.exportSymbol('proto.didcomm.messaging.GenerateKeyResponse', null, global);
goog.exportSymbol('proto.didcomm.messaging.GetDidDocumentRequest', null, global);
goog.exportSymbol('proto.didcomm.messaging.GetDidDocumentResponse', null, global);
goog.exportSymbol('proto.didcomm.messaging.JsonWebKey', null, global);
goog.exportSymbol('proto.didcomm.messaging.KeyType', null, global);
goog.exportSymbol('proto.didcomm.messaging.LdSuite', null, global);
goog.exportSymbol('proto.didcomm.messaging.PackRequest', null, global);
goog.exportSymbol('proto.didcomm.messaging.PackResponse', null, global);
goog.exportSymbol('proto.didcomm.messaging.ResolveKeyRequest', null, global);
goog.exportSymbol('proto.didcomm.messaging.ResolveKeyResponse', null, global);
goog.exportSymbol('proto.didcomm.messaging.ResolveRequest', null, global);
goog.exportSymbol('proto.didcomm.messaging.ResolveResponse', null, global);
goog.exportSymbol('proto.didcomm.messaging.SignRequest', null, global);
goog.exportSymbol('proto.didcomm.messaging.SignResponse', null, global);
goog.exportSymbol('proto.didcomm.messaging.UnpackRequest', null, global);
goog.exportSymbol('proto.didcomm.messaging.UnpackResponse', null, global);
goog.exportSymbol('proto.didcomm.messaging.VerifyProofRequest', null, global);
goog.exportSymbol('proto.didcomm.messaging.VerifyProofResponse', null, global);
goog.exportSymbol('proto.didcomm.messaging.VerifyRequest', null, global);
goog.exportSymbol('proto.didcomm.messaging.VerifyResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.GenerateKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.GenerateKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.GenerateKeyRequest.displayName = 'proto.didcomm.messaging.GenerateKeyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.GenerateKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.didcomm.messaging.GenerateKeyResponse.repeatedFields_, null);
};
goog.inherits(proto.didcomm.messaging.GenerateKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.GenerateKeyResponse.displayName = 'proto.didcomm.messaging.GenerateKeyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.ConvertKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.ConvertKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.ConvertKeyRequest.displayName = 'proto.didcomm.messaging.ConvertKeyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.ConvertKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.ConvertKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.ConvertKeyResponse.displayName = 'proto.didcomm.messaging.ConvertKeyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.SignRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.SignRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.SignRequest.displayName = 'proto.didcomm.messaging.SignRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.SignResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.SignResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.SignResponse.displayName = 'proto.didcomm.messaging.SignResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.VerifyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.VerifyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.VerifyRequest.displayName = 'proto.didcomm.messaging.VerifyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.VerifyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.VerifyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.VerifyResponse.displayName = 'proto.didcomm.messaging.VerifyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.PackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.PackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.PackRequest.displayName = 'proto.didcomm.messaging.PackRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.PackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.PackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.PackResponse.displayName = 'proto.didcomm.messaging.PackResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.UnpackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.UnpackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.UnpackRequest.displayName = 'proto.didcomm.messaging.UnpackRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.UnpackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.UnpackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.UnpackResponse.displayName = 'proto.didcomm.messaging.UnpackResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.GetDidDocumentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.GetDidDocumentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.GetDidDocumentRequest.displayName = 'proto.didcomm.messaging.GetDidDocumentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.GetDidDocumentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.GetDidDocumentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.GetDidDocumentResponse.displayName = 'proto.didcomm.messaging.GetDidDocumentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.JsonWebKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.JsonWebKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.JsonWebKey.displayName = 'proto.didcomm.messaging.JsonWebKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.ResolveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.ResolveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.ResolveRequest.displayName = 'proto.didcomm.messaging.ResolveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.ResolveResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.didcomm.messaging.ResolveResponse.repeatedFields_, null);
};
goog.inherits(proto.didcomm.messaging.ResolveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.ResolveResponse.displayName = 'proto.didcomm.messaging.ResolveResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.ResolveKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.ResolveKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.ResolveKeyRequest.displayName = 'proto.didcomm.messaging.ResolveKeyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.ResolveKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.ResolveKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.ResolveKeyResponse.displayName = 'proto.didcomm.messaging.ResolveKeyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.CreateProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.CreateProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.CreateProofRequest.displayName = 'proto.didcomm.messaging.CreateProofRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.CreateProofResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.CreateProofResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.CreateProofResponse.displayName = 'proto.didcomm.messaging.CreateProofResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.VerifyProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.VerifyProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.VerifyProofRequest.displayName = 'proto.didcomm.messaging.VerifyProofRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.didcomm.messaging.VerifyProofResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.didcomm.messaging.VerifyProofResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.didcomm.messaging.VerifyProofResponse.displayName = 'proto.didcomm.messaging.VerifyProofResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.GenerateKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.GenerateKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.GenerateKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.GenerateKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    seed: msg.getSeed_asB64(),
    keyType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.GenerateKeyRequest}
 */
proto.didcomm.messaging.GenerateKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.GenerateKeyRequest;
  return proto.didcomm.messaging.GenerateKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.GenerateKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.GenerateKeyRequest}
 */
proto.didcomm.messaging.GenerateKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSeed(value);
      break;
    case 2:
      var value = /** @type {!proto.didcomm.messaging.KeyType} */ (reader.readEnum());
      msg.setKeyType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.GenerateKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.GenerateKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.GenerateKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.GenerateKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKeyType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional bytes seed = 1;
 * @return {!(string|Uint8Array)}
 */
proto.didcomm.messaging.GenerateKeyRequest.prototype.getSeed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes seed = 1;
 * This is a type-conversion wrapper around `getSeed()`
 * @return {string}
 */
proto.didcomm.messaging.GenerateKeyRequest.prototype.getSeed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSeed()));
};


/**
 * optional bytes seed = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSeed()`
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.GenerateKeyRequest.prototype.getSeed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSeed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.didcomm.messaging.GenerateKeyRequest} returns this
 */
proto.didcomm.messaging.GenerateKeyRequest.prototype.setSeed = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional KeyType key_type = 2;
 * @return {!proto.didcomm.messaging.KeyType}
 */
proto.didcomm.messaging.GenerateKeyRequest.prototype.getKeyType = function() {
  return /** @type {!proto.didcomm.messaging.KeyType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.didcomm.messaging.KeyType} value
 * @return {!proto.didcomm.messaging.GenerateKeyRequest} returns this
 */
proto.didcomm.messaging.GenerateKeyRequest.prototype.setKeyType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.didcomm.messaging.GenerateKeyResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.GenerateKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.GenerateKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.GenerateKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.GenerateKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyList: jspb.Message.toObjectList(msg.getKeyList(),
    proto.didcomm.messaging.JsonWebKey.toObject, includeInstance),
    didDocument: (f = msg.getDidDocument()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.GenerateKeyResponse}
 */
proto.didcomm.messaging.GenerateKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.GenerateKeyResponse;
  return proto.didcomm.messaging.GenerateKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.GenerateKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.GenerateKeyResponse}
 */
proto.didcomm.messaging.GenerateKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.didcomm.messaging.JsonWebKey;
      reader.readMessage(value,proto.didcomm.messaging.JsonWebKey.deserializeBinaryFromReader);
      msg.addKey(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setDidDocument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.GenerateKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.GenerateKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.GenerateKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.GenerateKeyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.didcomm.messaging.JsonWebKey.serializeBinaryToWriter
    );
  }
  f = message.getDidDocument();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * repeated JsonWebKey key = 1;
 * @return {!Array<!proto.didcomm.messaging.JsonWebKey>}
 */
proto.didcomm.messaging.GenerateKeyResponse.prototype.getKeyList = function() {
  return /** @type{!Array<!proto.didcomm.messaging.JsonWebKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.didcomm.messaging.JsonWebKey, 1));
};


/**
 * @param {!Array<!proto.didcomm.messaging.JsonWebKey>} value
 * @return {!proto.didcomm.messaging.GenerateKeyResponse} returns this
*/
proto.didcomm.messaging.GenerateKeyResponse.prototype.setKeyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.didcomm.messaging.JsonWebKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.didcomm.messaging.JsonWebKey}
 */
proto.didcomm.messaging.GenerateKeyResponse.prototype.addKey = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.didcomm.messaging.JsonWebKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.didcomm.messaging.GenerateKeyResponse} returns this
 */
proto.didcomm.messaging.GenerateKeyResponse.prototype.clearKeyList = function() {
  return this.setKeyList([]);
};


/**
 * optional google.protobuf.Struct did_document = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.didcomm.messaging.GenerateKeyResponse.prototype.getDidDocument = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.didcomm.messaging.GenerateKeyResponse} returns this
*/
proto.didcomm.messaging.GenerateKeyResponse.prototype.setDidDocument = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.GenerateKeyResponse} returns this
 */
proto.didcomm.messaging.GenerateKeyResponse.prototype.clearDidDocument = function() {
  return this.setDidDocument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.GenerateKeyResponse.prototype.hasDidDocument = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.ConvertKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.ConvertKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.ConvertKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.ConvertKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.didcomm.messaging.JsonWebKey.toObject(includeInstance, f),
    targetType: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.ConvertKeyRequest}
 */
proto.didcomm.messaging.ConvertKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.ConvertKeyRequest;
  return proto.didcomm.messaging.ConvertKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.ConvertKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.ConvertKeyRequest}
 */
proto.didcomm.messaging.ConvertKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.didcomm.messaging.JsonWebKey;
      reader.readMessage(value,proto.didcomm.messaging.JsonWebKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.ConvertKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.ConvertKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.ConvertKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.ConvertKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.didcomm.messaging.JsonWebKey.serializeBinaryToWriter
    );
  }
  f = message.getTargetType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional JsonWebKey key = 1;
 * @return {?proto.didcomm.messaging.JsonWebKey}
 */
proto.didcomm.messaging.ConvertKeyRequest.prototype.getKey = function() {
  return /** @type{?proto.didcomm.messaging.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, proto.didcomm.messaging.JsonWebKey, 1));
};


/**
 * @param {?proto.didcomm.messaging.JsonWebKey|undefined} value
 * @return {!proto.didcomm.messaging.ConvertKeyRequest} returns this
*/
proto.didcomm.messaging.ConvertKeyRequest.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.ConvertKeyRequest} returns this
 */
proto.didcomm.messaging.ConvertKeyRequest.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.ConvertKeyRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string target_type = 2;
 * @return {string}
 */
proto.didcomm.messaging.ConvertKeyRequest.prototype.getTargetType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.didcomm.messaging.ConvertKeyRequest} returns this
 */
proto.didcomm.messaging.ConvertKeyRequest.prototype.setTargetType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.ConvertKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.ConvertKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.ConvertKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.ConvertKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.didcomm.messaging.JsonWebKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.ConvertKeyResponse}
 */
proto.didcomm.messaging.ConvertKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.ConvertKeyResponse;
  return proto.didcomm.messaging.ConvertKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.ConvertKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.ConvertKeyResponse}
 */
proto.didcomm.messaging.ConvertKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.didcomm.messaging.JsonWebKey;
      reader.readMessage(value,proto.didcomm.messaging.JsonWebKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.ConvertKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.ConvertKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.ConvertKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.ConvertKeyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.didcomm.messaging.JsonWebKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional JsonWebKey key = 1;
 * @return {?proto.didcomm.messaging.JsonWebKey}
 */
proto.didcomm.messaging.ConvertKeyResponse.prototype.getKey = function() {
  return /** @type{?proto.didcomm.messaging.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, proto.didcomm.messaging.JsonWebKey, 1));
};


/**
 * @param {?proto.didcomm.messaging.JsonWebKey|undefined} value
 * @return {!proto.didcomm.messaging.ConvertKeyResponse} returns this
*/
proto.didcomm.messaging.ConvertKeyResponse.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.ConvertKeyResponse} returns this
 */
proto.didcomm.messaging.ConvertKeyResponse.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.ConvertKeyResponse.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.SignRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.SignRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.SignRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.SignRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: msg.getPayload_asB64(),
    key: (f = msg.getKey()) && proto.didcomm.messaging.JsonWebKey.toObject(includeInstance, f),
    appendTo: (f = msg.getAppendTo()) && security_pb.SignedMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.SignRequest}
 */
proto.didcomm.messaging.SignRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.SignRequest;
  return proto.didcomm.messaging.SignRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.SignRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.SignRequest}
 */
proto.didcomm.messaging.SignRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 2:
      var value = new proto.didcomm.messaging.JsonWebKey;
      reader.readMessage(value,proto.didcomm.messaging.JsonWebKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 3:
      var value = new security_pb.SignedMessage;
      reader.readMessage(value,security_pb.SignedMessage.deserializeBinaryFromReader);
      msg.setAppendTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.SignRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.SignRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.SignRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.SignRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.didcomm.messaging.JsonWebKey.serializeBinaryToWriter
    );
  }
  f = message.getAppendTo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      security_pb.SignedMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.didcomm.messaging.SignRequest.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.didcomm.messaging.SignRequest.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.SignRequest.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.didcomm.messaging.SignRequest} returns this
 */
proto.didcomm.messaging.SignRequest.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional JsonWebKey key = 2;
 * @return {?proto.didcomm.messaging.JsonWebKey}
 */
proto.didcomm.messaging.SignRequest.prototype.getKey = function() {
  return /** @type{?proto.didcomm.messaging.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, proto.didcomm.messaging.JsonWebKey, 2));
};


/**
 * @param {?proto.didcomm.messaging.JsonWebKey|undefined} value
 * @return {!proto.didcomm.messaging.SignRequest} returns this
*/
proto.didcomm.messaging.SignRequest.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.SignRequest} returns this
 */
proto.didcomm.messaging.SignRequest.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.SignRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SignedMessage append_to = 3;
 * @return {?proto.didcomm.messaging.SignedMessage}
 */
proto.didcomm.messaging.SignRequest.prototype.getAppendTo = function() {
  return /** @type{?proto.didcomm.messaging.SignedMessage} */ (
    jspb.Message.getWrapperField(this, security_pb.SignedMessage, 3));
};


/**
 * @param {?proto.didcomm.messaging.SignedMessage|undefined} value
 * @return {!proto.didcomm.messaging.SignRequest} returns this
*/
proto.didcomm.messaging.SignRequest.prototype.setAppendTo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.SignRequest} returns this
 */
proto.didcomm.messaging.SignRequest.prototype.clearAppendTo = function() {
  return this.setAppendTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.SignRequest.prototype.hasAppendTo = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.SignResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.SignResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.SignResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.SignResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && security_pb.SignedMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.SignResponse}
 */
proto.didcomm.messaging.SignResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.SignResponse;
  return proto.didcomm.messaging.SignResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.SignResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.SignResponse}
 */
proto.didcomm.messaging.SignResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new security_pb.SignedMessage;
      reader.readMessage(value,security_pb.SignedMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.SignResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.SignResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.SignResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.SignResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      security_pb.SignedMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional SignedMessage message = 1;
 * @return {?proto.didcomm.messaging.SignedMessage}
 */
proto.didcomm.messaging.SignResponse.prototype.getMessage = function() {
  return /** @type{?proto.didcomm.messaging.SignedMessage} */ (
    jspb.Message.getWrapperField(this, security_pb.SignedMessage, 1));
};


/**
 * @param {?proto.didcomm.messaging.SignedMessage|undefined} value
 * @return {!proto.didcomm.messaging.SignResponse} returns this
*/
proto.didcomm.messaging.SignResponse.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.SignResponse} returns this
 */
proto.didcomm.messaging.SignResponse.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.SignResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.VerifyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.VerifyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.VerifyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.VerifyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && security_pb.SignedMessage.toObject(includeInstance, f),
    key: (f = msg.getKey()) && proto.didcomm.messaging.JsonWebKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.VerifyRequest}
 */
proto.didcomm.messaging.VerifyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.VerifyRequest;
  return proto.didcomm.messaging.VerifyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.VerifyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.VerifyRequest}
 */
proto.didcomm.messaging.VerifyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new security_pb.SignedMessage;
      reader.readMessage(value,security_pb.SignedMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = new proto.didcomm.messaging.JsonWebKey;
      reader.readMessage(value,proto.didcomm.messaging.JsonWebKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.VerifyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.VerifyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.VerifyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.VerifyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      security_pb.SignedMessage.serializeBinaryToWriter
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.didcomm.messaging.JsonWebKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional SignedMessage message = 1;
 * @return {?proto.didcomm.messaging.SignedMessage}
 */
proto.didcomm.messaging.VerifyRequest.prototype.getMessage = function() {
  return /** @type{?proto.didcomm.messaging.SignedMessage} */ (
    jspb.Message.getWrapperField(this, security_pb.SignedMessage, 1));
};


/**
 * @param {?proto.didcomm.messaging.SignedMessage|undefined} value
 * @return {!proto.didcomm.messaging.VerifyRequest} returns this
*/
proto.didcomm.messaging.VerifyRequest.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.VerifyRequest} returns this
 */
proto.didcomm.messaging.VerifyRequest.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.VerifyRequest.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional JsonWebKey key = 2;
 * @return {?proto.didcomm.messaging.JsonWebKey}
 */
proto.didcomm.messaging.VerifyRequest.prototype.getKey = function() {
  return /** @type{?proto.didcomm.messaging.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, proto.didcomm.messaging.JsonWebKey, 2));
};


/**
 * @param {?proto.didcomm.messaging.JsonWebKey|undefined} value
 * @return {!proto.didcomm.messaging.VerifyRequest} returns this
*/
proto.didcomm.messaging.VerifyRequest.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.VerifyRequest} returns this
 */
proto.didcomm.messaging.VerifyRequest.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.VerifyRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.VerifyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.VerifyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.VerifyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.VerifyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    isValid: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.VerifyResponse}
 */
proto.didcomm.messaging.VerifyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.VerifyResponse;
  return proto.didcomm.messaging.VerifyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.VerifyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.VerifyResponse}
 */
proto.didcomm.messaging.VerifyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsValid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.VerifyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.VerifyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.VerifyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.VerifyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsValid();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool is_valid = 1;
 * @return {boolean}
 */
proto.didcomm.messaging.VerifyResponse.prototype.getIsValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.didcomm.messaging.VerifyResponse} returns this
 */
proto.didcomm.messaging.VerifyResponse.prototype.setIsValid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.PackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.PackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.PackRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.PackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderKey: (f = msg.getSenderKey()) && proto.didcomm.messaging.JsonWebKey.toObject(includeInstance, f),
    receiverKey: (f = msg.getReceiverKey()) && proto.didcomm.messaging.JsonWebKey.toObject(includeInstance, f),
    associatedData: msg.getAssociatedData_asB64(),
    plaintext: msg.getPlaintext_asB64(),
    mode: jspb.Message.getFieldWithDefault(msg, 5, 0),
    algorithm: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.PackRequest}
 */
proto.didcomm.messaging.PackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.PackRequest;
  return proto.didcomm.messaging.PackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.PackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.PackRequest}
 */
proto.didcomm.messaging.PackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.didcomm.messaging.JsonWebKey;
      reader.readMessage(value,proto.didcomm.messaging.JsonWebKey.deserializeBinaryFromReader);
      msg.setSenderKey(value);
      break;
    case 2:
      var value = new proto.didcomm.messaging.JsonWebKey;
      reader.readMessage(value,proto.didcomm.messaging.JsonWebKey.deserializeBinaryFromReader);
      msg.setReceiverKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssociatedData(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPlaintext(value);
      break;
    case 5:
      var value = /** @type {!proto.didcomm.messaging.EncryptionMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 6:
      var value = /** @type {!proto.didcomm.messaging.EncryptionAlgorithm} */ (reader.readEnum());
      msg.setAlgorithm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.PackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.PackRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.PackRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.PackRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.didcomm.messaging.JsonWebKey.serializeBinaryToWriter
    );
  }
  f = message.getReceiverKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.didcomm.messaging.JsonWebKey.serializeBinaryToWriter
    );
  }
  f = message.getAssociatedData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPlaintext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getAlgorithm();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional JsonWebKey sender_key = 1;
 * @return {?proto.didcomm.messaging.JsonWebKey}
 */
proto.didcomm.messaging.PackRequest.prototype.getSenderKey = function() {
  return /** @type{?proto.didcomm.messaging.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, proto.didcomm.messaging.JsonWebKey, 1));
};


/**
 * @param {?proto.didcomm.messaging.JsonWebKey|undefined} value
 * @return {!proto.didcomm.messaging.PackRequest} returns this
*/
proto.didcomm.messaging.PackRequest.prototype.setSenderKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.PackRequest} returns this
 */
proto.didcomm.messaging.PackRequest.prototype.clearSenderKey = function() {
  return this.setSenderKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.PackRequest.prototype.hasSenderKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional JsonWebKey receiver_key = 2;
 * @return {?proto.didcomm.messaging.JsonWebKey}
 */
proto.didcomm.messaging.PackRequest.prototype.getReceiverKey = function() {
  return /** @type{?proto.didcomm.messaging.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, proto.didcomm.messaging.JsonWebKey, 2));
};


/**
 * @param {?proto.didcomm.messaging.JsonWebKey|undefined} value
 * @return {!proto.didcomm.messaging.PackRequest} returns this
*/
proto.didcomm.messaging.PackRequest.prototype.setReceiverKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.PackRequest} returns this
 */
proto.didcomm.messaging.PackRequest.prototype.clearReceiverKey = function() {
  return this.setReceiverKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.PackRequest.prototype.hasReceiverKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes associated_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.didcomm.messaging.PackRequest.prototype.getAssociatedData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes associated_data = 3;
 * This is a type-conversion wrapper around `getAssociatedData()`
 * @return {string}
 */
proto.didcomm.messaging.PackRequest.prototype.getAssociatedData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssociatedData()));
};


/**
 * optional bytes associated_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssociatedData()`
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.PackRequest.prototype.getAssociatedData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssociatedData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.didcomm.messaging.PackRequest} returns this
 */
proto.didcomm.messaging.PackRequest.prototype.setAssociatedData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes plaintext = 4;
 * @return {!(string|Uint8Array)}
 */
proto.didcomm.messaging.PackRequest.prototype.getPlaintext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes plaintext = 4;
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {string}
 */
proto.didcomm.messaging.PackRequest.prototype.getPlaintext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPlaintext()));
};


/**
 * optional bytes plaintext = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.PackRequest.prototype.getPlaintext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPlaintext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.didcomm.messaging.PackRequest} returns this
 */
proto.didcomm.messaging.PackRequest.prototype.setPlaintext = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional EncryptionMode mode = 5;
 * @return {!proto.didcomm.messaging.EncryptionMode}
 */
proto.didcomm.messaging.PackRequest.prototype.getMode = function() {
  return /** @type {!proto.didcomm.messaging.EncryptionMode} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.didcomm.messaging.EncryptionMode} value
 * @return {!proto.didcomm.messaging.PackRequest} returns this
 */
proto.didcomm.messaging.PackRequest.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional EncryptionAlgorithm algorithm = 6;
 * @return {!proto.didcomm.messaging.EncryptionAlgorithm}
 */
proto.didcomm.messaging.PackRequest.prototype.getAlgorithm = function() {
  return /** @type {!proto.didcomm.messaging.EncryptionAlgorithm} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.didcomm.messaging.EncryptionAlgorithm} value
 * @return {!proto.didcomm.messaging.PackRequest} returns this
 */
proto.didcomm.messaging.PackRequest.prototype.setAlgorithm = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.PackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.PackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.PackResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.PackResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && security_pb.EncryptedMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.PackResponse}
 */
proto.didcomm.messaging.PackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.PackResponse;
  return proto.didcomm.messaging.PackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.PackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.PackResponse}
 */
proto.didcomm.messaging.PackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new security_pb.EncryptedMessage;
      reader.readMessage(value,security_pb.EncryptedMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.PackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.PackResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.PackResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.PackResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      security_pb.EncryptedMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional EncryptedMessage message = 1;
 * @return {?proto.didcomm.messaging.EncryptedMessage}
 */
proto.didcomm.messaging.PackResponse.prototype.getMessage = function() {
  return /** @type{?proto.didcomm.messaging.EncryptedMessage} */ (
    jspb.Message.getWrapperField(this, security_pb.EncryptedMessage, 1));
};


/**
 * @param {?proto.didcomm.messaging.EncryptedMessage|undefined} value
 * @return {!proto.didcomm.messaging.PackResponse} returns this
*/
proto.didcomm.messaging.PackResponse.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.PackResponse} returns this
 */
proto.didcomm.messaging.PackResponse.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.PackResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.UnpackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.UnpackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.UnpackRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.UnpackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderKey: (f = msg.getSenderKey()) && proto.didcomm.messaging.JsonWebKey.toObject(includeInstance, f),
    receiverKey: (f = msg.getReceiverKey()) && proto.didcomm.messaging.JsonWebKey.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && security_pb.EncryptedMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.UnpackRequest}
 */
proto.didcomm.messaging.UnpackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.UnpackRequest;
  return proto.didcomm.messaging.UnpackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.UnpackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.UnpackRequest}
 */
proto.didcomm.messaging.UnpackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.didcomm.messaging.JsonWebKey;
      reader.readMessage(value,proto.didcomm.messaging.JsonWebKey.deserializeBinaryFromReader);
      msg.setSenderKey(value);
      break;
    case 2:
      var value = new proto.didcomm.messaging.JsonWebKey;
      reader.readMessage(value,proto.didcomm.messaging.JsonWebKey.deserializeBinaryFromReader);
      msg.setReceiverKey(value);
      break;
    case 3:
      var value = new security_pb.EncryptedMessage;
      reader.readMessage(value,security_pb.EncryptedMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.UnpackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.UnpackRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.UnpackRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.UnpackRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.didcomm.messaging.JsonWebKey.serializeBinaryToWriter
    );
  }
  f = message.getReceiverKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.didcomm.messaging.JsonWebKey.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      security_pb.EncryptedMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional JsonWebKey sender_key = 1;
 * @return {?proto.didcomm.messaging.JsonWebKey}
 */
proto.didcomm.messaging.UnpackRequest.prototype.getSenderKey = function() {
  return /** @type{?proto.didcomm.messaging.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, proto.didcomm.messaging.JsonWebKey, 1));
};


/**
 * @param {?proto.didcomm.messaging.JsonWebKey|undefined} value
 * @return {!proto.didcomm.messaging.UnpackRequest} returns this
*/
proto.didcomm.messaging.UnpackRequest.prototype.setSenderKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.UnpackRequest} returns this
 */
proto.didcomm.messaging.UnpackRequest.prototype.clearSenderKey = function() {
  return this.setSenderKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.UnpackRequest.prototype.hasSenderKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional JsonWebKey receiver_key = 2;
 * @return {?proto.didcomm.messaging.JsonWebKey}
 */
proto.didcomm.messaging.UnpackRequest.prototype.getReceiverKey = function() {
  return /** @type{?proto.didcomm.messaging.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, proto.didcomm.messaging.JsonWebKey, 2));
};


/**
 * @param {?proto.didcomm.messaging.JsonWebKey|undefined} value
 * @return {!proto.didcomm.messaging.UnpackRequest} returns this
*/
proto.didcomm.messaging.UnpackRequest.prototype.setReceiverKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.UnpackRequest} returns this
 */
proto.didcomm.messaging.UnpackRequest.prototype.clearReceiverKey = function() {
  return this.setReceiverKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.UnpackRequest.prototype.hasReceiverKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EncryptedMessage message = 3;
 * @return {?proto.didcomm.messaging.EncryptedMessage}
 */
proto.didcomm.messaging.UnpackRequest.prototype.getMessage = function() {
  return /** @type{?proto.didcomm.messaging.EncryptedMessage} */ (
    jspb.Message.getWrapperField(this, security_pb.EncryptedMessage, 3));
};


/**
 * @param {?proto.didcomm.messaging.EncryptedMessage|undefined} value
 * @return {!proto.didcomm.messaging.UnpackRequest} returns this
*/
proto.didcomm.messaging.UnpackRequest.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.UnpackRequest} returns this
 */
proto.didcomm.messaging.UnpackRequest.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.UnpackRequest.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.UnpackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.UnpackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.UnpackResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.UnpackResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    plaintext: msg.getPlaintext_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.UnpackResponse}
 */
proto.didcomm.messaging.UnpackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.UnpackResponse;
  return proto.didcomm.messaging.UnpackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.UnpackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.UnpackResponse}
 */
proto.didcomm.messaging.UnpackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPlaintext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.UnpackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.UnpackResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.UnpackResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.UnpackResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlaintext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes plaintext = 1;
 * @return {!(string|Uint8Array)}
 */
proto.didcomm.messaging.UnpackResponse.prototype.getPlaintext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes plaintext = 1;
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {string}
 */
proto.didcomm.messaging.UnpackResponse.prototype.getPlaintext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPlaintext()));
};


/**
 * optional bytes plaintext = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.UnpackResponse.prototype.getPlaintext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPlaintext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.didcomm.messaging.UnpackResponse} returns this
 */
proto.didcomm.messaging.UnpackResponse.prototype.setPlaintext = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.GetDidDocumentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.GetDidDocumentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.GetDidDocumentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.GetDidDocumentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.didcomm.messaging.JsonWebKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.GetDidDocumentRequest}
 */
proto.didcomm.messaging.GetDidDocumentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.GetDidDocumentRequest;
  return proto.didcomm.messaging.GetDidDocumentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.GetDidDocumentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.GetDidDocumentRequest}
 */
proto.didcomm.messaging.GetDidDocumentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.didcomm.messaging.JsonWebKey;
      reader.readMessage(value,proto.didcomm.messaging.JsonWebKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.GetDidDocumentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.GetDidDocumentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.GetDidDocumentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.GetDidDocumentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.didcomm.messaging.JsonWebKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional JsonWebKey key = 1;
 * @return {?proto.didcomm.messaging.JsonWebKey}
 */
proto.didcomm.messaging.GetDidDocumentRequest.prototype.getKey = function() {
  return /** @type{?proto.didcomm.messaging.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, proto.didcomm.messaging.JsonWebKey, 1));
};


/**
 * @param {?proto.didcomm.messaging.JsonWebKey|undefined} value
 * @return {!proto.didcomm.messaging.GetDidDocumentRequest} returns this
*/
proto.didcomm.messaging.GetDidDocumentRequest.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.GetDidDocumentRequest} returns this
 */
proto.didcomm.messaging.GetDidDocumentRequest.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.GetDidDocumentRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.GetDidDocumentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.GetDidDocumentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.GetDidDocumentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.GetDidDocumentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    didDocument: (f = msg.getDidDocument()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.GetDidDocumentResponse}
 */
proto.didcomm.messaging.GetDidDocumentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.GetDidDocumentResponse;
  return proto.didcomm.messaging.GetDidDocumentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.GetDidDocumentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.GetDidDocumentResponse}
 */
proto.didcomm.messaging.GetDidDocumentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setDidDocument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.GetDidDocumentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.GetDidDocumentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.GetDidDocumentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.GetDidDocumentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDidDocument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Struct did_document = 1;
 * @return {?proto.google.protobuf.Struct}
 */
proto.didcomm.messaging.GetDidDocumentResponse.prototype.getDidDocument = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 1));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.didcomm.messaging.GetDidDocumentResponse} returns this
*/
proto.didcomm.messaging.GetDidDocumentResponse.prototype.setDidDocument = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.GetDidDocumentResponse} returns this
 */
proto.didcomm.messaging.GetDidDocumentResponse.prototype.clearDidDocument = function() {
  return this.setDidDocument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.GetDidDocumentResponse.prototype.hasDidDocument = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.JsonWebKey.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.JsonWebKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.JsonWebKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.JsonWebKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    kid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    x: jspb.Message.getFieldWithDefault(msg, 2, ""),
    y: jspb.Message.getFieldWithDefault(msg, 3, ""),
    d: jspb.Message.getFieldWithDefault(msg, 4, ""),
    crv: jspb.Message.getFieldWithDefault(msg, 5, ""),
    kty: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.JsonWebKey}
 */
proto.didcomm.messaging.JsonWebKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.JsonWebKey;
  return proto.didcomm.messaging.JsonWebKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.JsonWebKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.JsonWebKey}
 */
proto.didcomm.messaging.JsonWebKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setD(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCrv(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setKty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.JsonWebKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.JsonWebKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.JsonWebKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.JsonWebKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getX();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getY();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getD();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCrv();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getKty();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string kid = 1;
 * @return {string}
 */
proto.didcomm.messaging.JsonWebKey.prototype.getKid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.didcomm.messaging.JsonWebKey} returns this
 */
proto.didcomm.messaging.JsonWebKey.prototype.setKid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string x = 2;
 * @return {string}
 */
proto.didcomm.messaging.JsonWebKey.prototype.getX = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.didcomm.messaging.JsonWebKey} returns this
 */
proto.didcomm.messaging.JsonWebKey.prototype.setX = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string y = 3;
 * @return {string}
 */
proto.didcomm.messaging.JsonWebKey.prototype.getY = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.didcomm.messaging.JsonWebKey} returns this
 */
proto.didcomm.messaging.JsonWebKey.prototype.setY = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string d = 4;
 * @return {string}
 */
proto.didcomm.messaging.JsonWebKey.prototype.getD = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.didcomm.messaging.JsonWebKey} returns this
 */
proto.didcomm.messaging.JsonWebKey.prototype.setD = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string crv = 5;
 * @return {string}
 */
proto.didcomm.messaging.JsonWebKey.prototype.getCrv = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.didcomm.messaging.JsonWebKey} returns this
 */
proto.didcomm.messaging.JsonWebKey.prototype.setCrv = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string kty = 6;
 * @return {string}
 */
proto.didcomm.messaging.JsonWebKey.prototype.getKty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.didcomm.messaging.JsonWebKey} returns this
 */
proto.didcomm.messaging.JsonWebKey.prototype.setKty = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.ResolveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.ResolveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.ResolveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.ResolveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    did: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.ResolveRequest}
 */
proto.didcomm.messaging.ResolveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.ResolveRequest;
  return proto.didcomm.messaging.ResolveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.ResolveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.ResolveRequest}
 */
proto.didcomm.messaging.ResolveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.ResolveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.ResolveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.ResolveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.ResolveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string did = 1;
 * @return {string}
 */
proto.didcomm.messaging.ResolveRequest.prototype.getDid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.didcomm.messaging.ResolveRequest} returns this
 */
proto.didcomm.messaging.ResolveRequest.prototype.setDid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.didcomm.messaging.ResolveResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.ResolveResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.ResolveResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.ResolveResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.ResolveResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    didDocument: (f = msg.getDidDocument()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    keysList: jspb.Message.toObjectList(msg.getKeysList(),
    proto.didcomm.messaging.JsonWebKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.ResolveResponse}
 */
proto.didcomm.messaging.ResolveResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.ResolveResponse;
  return proto.didcomm.messaging.ResolveResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.ResolveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.ResolveResponse}
 */
proto.didcomm.messaging.ResolveResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setDidDocument(value);
      break;
    case 2:
      var value = new proto.didcomm.messaging.JsonWebKey;
      reader.readMessage(value,proto.didcomm.messaging.JsonWebKey.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.ResolveResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.ResolveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.ResolveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.ResolveResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDidDocument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.didcomm.messaging.JsonWebKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Struct did_document = 1;
 * @return {?proto.google.protobuf.Struct}
 */
proto.didcomm.messaging.ResolveResponse.prototype.getDidDocument = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 1));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.didcomm.messaging.ResolveResponse} returns this
*/
proto.didcomm.messaging.ResolveResponse.prototype.setDidDocument = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.ResolveResponse} returns this
 */
proto.didcomm.messaging.ResolveResponse.prototype.clearDidDocument = function() {
  return this.setDidDocument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.ResolveResponse.prototype.hasDidDocument = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated JsonWebKey keys = 2;
 * @return {!Array<!proto.didcomm.messaging.JsonWebKey>}
 */
proto.didcomm.messaging.ResolveResponse.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.didcomm.messaging.JsonWebKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.didcomm.messaging.JsonWebKey, 2));
};


/**
 * @param {!Array<!proto.didcomm.messaging.JsonWebKey>} value
 * @return {!proto.didcomm.messaging.ResolveResponse} returns this
*/
proto.didcomm.messaging.ResolveResponse.prototype.setKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.didcomm.messaging.JsonWebKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.didcomm.messaging.JsonWebKey}
 */
proto.didcomm.messaging.ResolveResponse.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.didcomm.messaging.JsonWebKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.didcomm.messaging.ResolveResponse} returns this
 */
proto.didcomm.messaging.ResolveResponse.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.ResolveKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.ResolveKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.ResolveKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.ResolveKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    didUri: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.ResolveKeyRequest}
 */
proto.didcomm.messaging.ResolveKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.ResolveKeyRequest;
  return proto.didcomm.messaging.ResolveKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.ResolveKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.ResolveKeyRequest}
 */
proto.didcomm.messaging.ResolveKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDidUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.ResolveKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.ResolveKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.ResolveKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.ResolveKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDidUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string did_uri = 1;
 * @return {string}
 */
proto.didcomm.messaging.ResolveKeyRequest.prototype.getDidUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.didcomm.messaging.ResolveKeyRequest} returns this
 */
proto.didcomm.messaging.ResolveKeyRequest.prototype.setDidUri = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.ResolveKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.ResolveKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.ResolveKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.ResolveKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.didcomm.messaging.JsonWebKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.ResolveKeyResponse}
 */
proto.didcomm.messaging.ResolveKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.ResolveKeyResponse;
  return proto.didcomm.messaging.ResolveKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.ResolveKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.ResolveKeyResponse}
 */
proto.didcomm.messaging.ResolveKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.didcomm.messaging.JsonWebKey;
      reader.readMessage(value,proto.didcomm.messaging.JsonWebKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.ResolveKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.ResolveKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.ResolveKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.ResolveKeyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.didcomm.messaging.JsonWebKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional JsonWebKey key = 1;
 * @return {?proto.didcomm.messaging.JsonWebKey}
 */
proto.didcomm.messaging.ResolveKeyResponse.prototype.getKey = function() {
  return /** @type{?proto.didcomm.messaging.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, proto.didcomm.messaging.JsonWebKey, 1));
};


/**
 * @param {?proto.didcomm.messaging.JsonWebKey|undefined} value
 * @return {!proto.didcomm.messaging.ResolveKeyResponse} returns this
*/
proto.didcomm.messaging.ResolveKeyResponse.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.ResolveKeyResponse} returns this
 */
proto.didcomm.messaging.ResolveKeyResponse.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.ResolveKeyResponse.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.CreateProofRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.CreateProofRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.CreateProofRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.CreateProofRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    document: (f = msg.getDocument()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    key: (f = msg.getKey()) && proto.didcomm.messaging.JsonWebKey.toObject(includeInstance, f),
    suite: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.CreateProofRequest}
 */
proto.didcomm.messaging.CreateProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.CreateProofRequest;
  return proto.didcomm.messaging.CreateProofRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.CreateProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.CreateProofRequest}
 */
proto.didcomm.messaging.CreateProofRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setDocument(value);
      break;
    case 3:
      var value = new proto.didcomm.messaging.JsonWebKey;
      reader.readMessage(value,proto.didcomm.messaging.JsonWebKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 4:
      var value = /** @type {!proto.didcomm.messaging.LdSuite} */ (reader.readEnum());
      msg.setSuite(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.CreateProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.CreateProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.CreateProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.CreateProofRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.didcomm.messaging.JsonWebKey.serializeBinaryToWriter
    );
  }
  f = message.getSuite();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional google.protobuf.Struct document = 1;
 * @return {?proto.google.protobuf.Struct}
 */
proto.didcomm.messaging.CreateProofRequest.prototype.getDocument = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 1));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.didcomm.messaging.CreateProofRequest} returns this
*/
proto.didcomm.messaging.CreateProofRequest.prototype.setDocument = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.CreateProofRequest} returns this
 */
proto.didcomm.messaging.CreateProofRequest.prototype.clearDocument = function() {
  return this.setDocument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.CreateProofRequest.prototype.hasDocument = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional JsonWebKey key = 3;
 * @return {?proto.didcomm.messaging.JsonWebKey}
 */
proto.didcomm.messaging.CreateProofRequest.prototype.getKey = function() {
  return /** @type{?proto.didcomm.messaging.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, proto.didcomm.messaging.JsonWebKey, 3));
};


/**
 * @param {?proto.didcomm.messaging.JsonWebKey|undefined} value
 * @return {!proto.didcomm.messaging.CreateProofRequest} returns this
*/
proto.didcomm.messaging.CreateProofRequest.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.CreateProofRequest} returns this
 */
proto.didcomm.messaging.CreateProofRequest.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.CreateProofRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LdSuite suite = 4;
 * @return {!proto.didcomm.messaging.LdSuite}
 */
proto.didcomm.messaging.CreateProofRequest.prototype.getSuite = function() {
  return /** @type {!proto.didcomm.messaging.LdSuite} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.didcomm.messaging.LdSuite} value
 * @return {!proto.didcomm.messaging.CreateProofRequest} returns this
 */
proto.didcomm.messaging.CreateProofRequest.prototype.setSuite = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.CreateProofResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.CreateProofResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.CreateProofResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.CreateProofResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    signedDocument: (f = msg.getSignedDocument()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.CreateProofResponse}
 */
proto.didcomm.messaging.CreateProofResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.CreateProofResponse;
  return proto.didcomm.messaging.CreateProofResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.CreateProofResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.CreateProofResponse}
 */
proto.didcomm.messaging.CreateProofResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setSignedDocument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.CreateProofResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.CreateProofResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.CreateProofResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.CreateProofResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignedDocument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Struct signed_document = 1;
 * @return {?proto.google.protobuf.Struct}
 */
proto.didcomm.messaging.CreateProofResponse.prototype.getSignedDocument = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 1));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.didcomm.messaging.CreateProofResponse} returns this
*/
proto.didcomm.messaging.CreateProofResponse.prototype.setSignedDocument = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.didcomm.messaging.CreateProofResponse} returns this
 */
proto.didcomm.messaging.CreateProofResponse.prototype.clearSignedDocument = function() {
  return this.setSignedDocument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.didcomm.messaging.CreateProofResponse.prototype.hasSignedDocument = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.VerifyProofRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.VerifyProofRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.VerifyProofRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.VerifyProofRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.VerifyProofRequest}
 */
proto.didcomm.messaging.VerifyProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.VerifyProofRequest;
  return proto.didcomm.messaging.VerifyProofRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.VerifyProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.VerifyProofRequest}
 */
proto.didcomm.messaging.VerifyProofRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.VerifyProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.VerifyProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.VerifyProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.VerifyProofRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.didcomm.messaging.VerifyProofResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.didcomm.messaging.VerifyProofResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.didcomm.messaging.VerifyProofResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.VerifyProofResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.didcomm.messaging.VerifyProofResponse}
 */
proto.didcomm.messaging.VerifyProofResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.didcomm.messaging.VerifyProofResponse;
  return proto.didcomm.messaging.VerifyProofResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.didcomm.messaging.VerifyProofResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.didcomm.messaging.VerifyProofResponse}
 */
proto.didcomm.messaging.VerifyProofResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.didcomm.messaging.VerifyProofResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.didcomm.messaging.VerifyProofResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.didcomm.messaging.VerifyProofResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.didcomm.messaging.VerifyProofResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.didcomm.messaging.KeyType = {
  ED25519: 0,
  X25519: 1,
  P256: 2,
  BLS12381G1G2: 3,
  SECP256K1: 4
};

/**
 * @enum {number}
 */
proto.didcomm.messaging.LdSuite = {
  JCSED25519SIGNATURE2020: 0
};

goog.object.extend(exports, proto.didcomm.messaging);
