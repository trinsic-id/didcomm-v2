// source: transport.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var keys_pb = require('./keys_pb.js');
goog.object.extend(proto, keys_pb);
var pbmse_pbmse_pb = require('./pbmse/pbmse_pb.js');
goog.object.extend(proto, pbmse_pbmse_pb);
goog.exportSymbol('proto.okapi.transport.CoreMessage', null, global);
goog.exportSymbol('proto.okapi.transport.PackRequest', null, global);
goog.exportSymbol('proto.okapi.transport.PackResponse', null, global);
goog.exportSymbol('proto.okapi.transport.SignRequest', null, global);
goog.exportSymbol('proto.okapi.transport.SignResponse', null, global);
goog.exportSymbol('proto.okapi.transport.UnpackRequest', null, global);
goog.exportSymbol('proto.okapi.transport.UnpackResponse', null, global);
goog.exportSymbol('proto.okapi.transport.VerifyRequest', null, global);
goog.exportSymbol('proto.okapi.transport.VerifyResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.okapi.transport.SignRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.okapi.transport.SignRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.okapi.transport.SignRequest.displayName = 'proto.okapi.transport.SignRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.okapi.transport.SignResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.okapi.transport.SignResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.okapi.transport.SignResponse.displayName = 'proto.okapi.transport.SignResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.okapi.transport.VerifyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.okapi.transport.VerifyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.okapi.transport.VerifyRequest.displayName = 'proto.okapi.transport.VerifyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.okapi.transport.VerifyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.okapi.transport.VerifyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.okapi.transport.VerifyResponse.displayName = 'proto.okapi.transport.VerifyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.okapi.transport.PackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.okapi.transport.PackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.okapi.transport.PackRequest.displayName = 'proto.okapi.transport.PackRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.okapi.transport.PackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.okapi.transport.PackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.okapi.transport.PackResponse.displayName = 'proto.okapi.transport.PackResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.okapi.transport.UnpackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.okapi.transport.UnpackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.okapi.transport.UnpackRequest.displayName = 'proto.okapi.transport.UnpackRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.okapi.transport.UnpackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.okapi.transport.UnpackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.okapi.transport.UnpackResponse.displayName = 'proto.okapi.transport.UnpackResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.okapi.transport.CoreMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.okapi.transport.CoreMessage.repeatedFields_, null);
};
goog.inherits(proto.okapi.transport.CoreMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.okapi.transport.CoreMessage.displayName = 'proto.okapi.transport.CoreMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.okapi.transport.SignRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.okapi.transport.SignRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.okapi.transport.SignRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.SignRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: msg.getPayload_asB64(),
    key: (f = msg.getKey()) && keys_pb.JsonWebKey.toObject(includeInstance, f),
    appendTo: (f = msg.getAppendTo()) && pbmse_pbmse_pb.SignedMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.okapi.transport.SignRequest}
 */
proto.okapi.transport.SignRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.okapi.transport.SignRequest;
  return proto.okapi.transport.SignRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.okapi.transport.SignRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.okapi.transport.SignRequest}
 */
proto.okapi.transport.SignRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 2:
      var value = new keys_pb.JsonWebKey;
      reader.readMessage(value,keys_pb.JsonWebKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 3:
      var value = new pbmse_pbmse_pb.SignedMessage;
      reader.readMessage(value,pbmse_pbmse_pb.SignedMessage.deserializeBinaryFromReader);
      msg.setAppendTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.okapi.transport.SignRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.okapi.transport.SignRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.okapi.transport.SignRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.SignRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      keys_pb.JsonWebKey.serializeBinaryToWriter
    );
  }
  f = message.getAppendTo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      pbmse_pbmse_pb.SignedMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.okapi.transport.SignRequest.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.okapi.transport.SignRequest.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.okapi.transport.SignRequest.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.okapi.transport.SignRequest} returns this
 */
proto.okapi.transport.SignRequest.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional okapi.keys.JsonWebKey key = 2;
 * @return {?proto.okapi.keys.JsonWebKey}
 */
proto.okapi.transport.SignRequest.prototype.getKey = function() {
  return /** @type{?proto.okapi.keys.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, keys_pb.JsonWebKey, 2));
};


/**
 * @param {?proto.okapi.keys.JsonWebKey|undefined} value
 * @return {!proto.okapi.transport.SignRequest} returns this
*/
proto.okapi.transport.SignRequest.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.okapi.transport.SignRequest} returns this
 */
proto.okapi.transport.SignRequest.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.okapi.transport.SignRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional pbmse.SignedMessage append_to = 3;
 * @return {?proto.pbmse.SignedMessage}
 */
proto.okapi.transport.SignRequest.prototype.getAppendTo = function() {
  return /** @type{?proto.pbmse.SignedMessage} */ (
    jspb.Message.getWrapperField(this, pbmse_pbmse_pb.SignedMessage, 3));
};


/**
 * @param {?proto.pbmse.SignedMessage|undefined} value
 * @return {!proto.okapi.transport.SignRequest} returns this
*/
proto.okapi.transport.SignRequest.prototype.setAppendTo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.okapi.transport.SignRequest} returns this
 */
proto.okapi.transport.SignRequest.prototype.clearAppendTo = function() {
  return this.setAppendTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.okapi.transport.SignRequest.prototype.hasAppendTo = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.okapi.transport.SignResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.okapi.transport.SignResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.okapi.transport.SignResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.SignResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && pbmse_pbmse_pb.SignedMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.okapi.transport.SignResponse}
 */
proto.okapi.transport.SignResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.okapi.transport.SignResponse;
  return proto.okapi.transport.SignResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.okapi.transport.SignResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.okapi.transport.SignResponse}
 */
proto.okapi.transport.SignResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new pbmse_pbmse_pb.SignedMessage;
      reader.readMessage(value,pbmse_pbmse_pb.SignedMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.okapi.transport.SignResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.okapi.transport.SignResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.okapi.transport.SignResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.SignResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      pbmse_pbmse_pb.SignedMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional pbmse.SignedMessage message = 1;
 * @return {?proto.pbmse.SignedMessage}
 */
proto.okapi.transport.SignResponse.prototype.getMessage = function() {
  return /** @type{?proto.pbmse.SignedMessage} */ (
    jspb.Message.getWrapperField(this, pbmse_pbmse_pb.SignedMessage, 1));
};


/**
 * @param {?proto.pbmse.SignedMessage|undefined} value
 * @return {!proto.okapi.transport.SignResponse} returns this
*/
proto.okapi.transport.SignResponse.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.okapi.transport.SignResponse} returns this
 */
proto.okapi.transport.SignResponse.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.okapi.transport.SignResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.okapi.transport.VerifyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.okapi.transport.VerifyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.okapi.transport.VerifyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.VerifyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && pbmse_pbmse_pb.SignedMessage.toObject(includeInstance, f),
    key: (f = msg.getKey()) && keys_pb.JsonWebKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.okapi.transport.VerifyRequest}
 */
proto.okapi.transport.VerifyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.okapi.transport.VerifyRequest;
  return proto.okapi.transport.VerifyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.okapi.transport.VerifyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.okapi.transport.VerifyRequest}
 */
proto.okapi.transport.VerifyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new pbmse_pbmse_pb.SignedMessage;
      reader.readMessage(value,pbmse_pbmse_pb.SignedMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = new keys_pb.JsonWebKey;
      reader.readMessage(value,keys_pb.JsonWebKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.okapi.transport.VerifyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.okapi.transport.VerifyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.okapi.transport.VerifyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.VerifyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      pbmse_pbmse_pb.SignedMessage.serializeBinaryToWriter
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      keys_pb.JsonWebKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional pbmse.SignedMessage message = 1;
 * @return {?proto.pbmse.SignedMessage}
 */
proto.okapi.transport.VerifyRequest.prototype.getMessage = function() {
  return /** @type{?proto.pbmse.SignedMessage} */ (
    jspb.Message.getWrapperField(this, pbmse_pbmse_pb.SignedMessage, 1));
};


/**
 * @param {?proto.pbmse.SignedMessage|undefined} value
 * @return {!proto.okapi.transport.VerifyRequest} returns this
*/
proto.okapi.transport.VerifyRequest.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.okapi.transport.VerifyRequest} returns this
 */
proto.okapi.transport.VerifyRequest.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.okapi.transport.VerifyRequest.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional okapi.keys.JsonWebKey key = 2;
 * @return {?proto.okapi.keys.JsonWebKey}
 */
proto.okapi.transport.VerifyRequest.prototype.getKey = function() {
  return /** @type{?proto.okapi.keys.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, keys_pb.JsonWebKey, 2));
};


/**
 * @param {?proto.okapi.keys.JsonWebKey|undefined} value
 * @return {!proto.okapi.transport.VerifyRequest} returns this
*/
proto.okapi.transport.VerifyRequest.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.okapi.transport.VerifyRequest} returns this
 */
proto.okapi.transport.VerifyRequest.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.okapi.transport.VerifyRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.okapi.transport.VerifyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.okapi.transport.VerifyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.okapi.transport.VerifyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.VerifyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    isValid: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.okapi.transport.VerifyResponse}
 */
proto.okapi.transport.VerifyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.okapi.transport.VerifyResponse;
  return proto.okapi.transport.VerifyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.okapi.transport.VerifyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.okapi.transport.VerifyResponse}
 */
proto.okapi.transport.VerifyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsValid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.okapi.transport.VerifyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.okapi.transport.VerifyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.okapi.transport.VerifyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.VerifyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsValid();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool is_valid = 1;
 * @return {boolean}
 */
proto.okapi.transport.VerifyResponse.prototype.getIsValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.okapi.transport.VerifyResponse} returns this
 */
proto.okapi.transport.VerifyResponse.prototype.setIsValid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.okapi.transport.PackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.okapi.transport.PackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.okapi.transport.PackRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.PackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderKey: (f = msg.getSenderKey()) && keys_pb.JsonWebKey.toObject(includeInstance, f),
    receiverKey: (f = msg.getReceiverKey()) && keys_pb.JsonWebKey.toObject(includeInstance, f),
    associatedData: msg.getAssociatedData_asB64(),
    plaintext: msg.getPlaintext_asB64(),
    mode: jspb.Message.getFieldWithDefault(msg, 5, 0),
    algorithm: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.okapi.transport.PackRequest}
 */
proto.okapi.transport.PackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.okapi.transport.PackRequest;
  return proto.okapi.transport.PackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.okapi.transport.PackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.okapi.transport.PackRequest}
 */
proto.okapi.transport.PackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new keys_pb.JsonWebKey;
      reader.readMessage(value,keys_pb.JsonWebKey.deserializeBinaryFromReader);
      msg.setSenderKey(value);
      break;
    case 2:
      var value = new keys_pb.JsonWebKey;
      reader.readMessage(value,keys_pb.JsonWebKey.deserializeBinaryFromReader);
      msg.setReceiverKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssociatedData(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPlaintext(value);
      break;
    case 5:
      var value = /** @type {!proto.pbmse.EncryptionMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 6:
      var value = /** @type {!proto.pbmse.EncryptionAlgorithm} */ (reader.readEnum());
      msg.setAlgorithm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.okapi.transport.PackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.okapi.transport.PackRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.okapi.transport.PackRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.PackRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      keys_pb.JsonWebKey.serializeBinaryToWriter
    );
  }
  f = message.getReceiverKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      keys_pb.JsonWebKey.serializeBinaryToWriter
    );
  }
  f = message.getAssociatedData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPlaintext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getAlgorithm();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional okapi.keys.JsonWebKey sender_key = 1;
 * @return {?proto.okapi.keys.JsonWebKey}
 */
proto.okapi.transport.PackRequest.prototype.getSenderKey = function() {
  return /** @type{?proto.okapi.keys.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, keys_pb.JsonWebKey, 1));
};


/**
 * @param {?proto.okapi.keys.JsonWebKey|undefined} value
 * @return {!proto.okapi.transport.PackRequest} returns this
*/
proto.okapi.transport.PackRequest.prototype.setSenderKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.okapi.transport.PackRequest} returns this
 */
proto.okapi.transport.PackRequest.prototype.clearSenderKey = function() {
  return this.setSenderKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.okapi.transport.PackRequest.prototype.hasSenderKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional okapi.keys.JsonWebKey receiver_key = 2;
 * @return {?proto.okapi.keys.JsonWebKey}
 */
proto.okapi.transport.PackRequest.prototype.getReceiverKey = function() {
  return /** @type{?proto.okapi.keys.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, keys_pb.JsonWebKey, 2));
};


/**
 * @param {?proto.okapi.keys.JsonWebKey|undefined} value
 * @return {!proto.okapi.transport.PackRequest} returns this
*/
proto.okapi.transport.PackRequest.prototype.setReceiverKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.okapi.transport.PackRequest} returns this
 */
proto.okapi.transport.PackRequest.prototype.clearReceiverKey = function() {
  return this.setReceiverKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.okapi.transport.PackRequest.prototype.hasReceiverKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes associated_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.okapi.transport.PackRequest.prototype.getAssociatedData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes associated_data = 3;
 * This is a type-conversion wrapper around `getAssociatedData()`
 * @return {string}
 */
proto.okapi.transport.PackRequest.prototype.getAssociatedData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssociatedData()));
};


/**
 * optional bytes associated_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssociatedData()`
 * @return {!Uint8Array}
 */
proto.okapi.transport.PackRequest.prototype.getAssociatedData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssociatedData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.okapi.transport.PackRequest} returns this
 */
proto.okapi.transport.PackRequest.prototype.setAssociatedData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes plaintext = 4;
 * @return {!(string|Uint8Array)}
 */
proto.okapi.transport.PackRequest.prototype.getPlaintext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes plaintext = 4;
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {string}
 */
proto.okapi.transport.PackRequest.prototype.getPlaintext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPlaintext()));
};


/**
 * optional bytes plaintext = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {!Uint8Array}
 */
proto.okapi.transport.PackRequest.prototype.getPlaintext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPlaintext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.okapi.transport.PackRequest} returns this
 */
proto.okapi.transport.PackRequest.prototype.setPlaintext = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional pbmse.EncryptionMode mode = 5;
 * @return {!proto.pbmse.EncryptionMode}
 */
proto.okapi.transport.PackRequest.prototype.getMode = function() {
  return /** @type {!proto.pbmse.EncryptionMode} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.pbmse.EncryptionMode} value
 * @return {!proto.okapi.transport.PackRequest} returns this
 */
proto.okapi.transport.PackRequest.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional pbmse.EncryptionAlgorithm algorithm = 6;
 * @return {!proto.pbmse.EncryptionAlgorithm}
 */
proto.okapi.transport.PackRequest.prototype.getAlgorithm = function() {
  return /** @type {!proto.pbmse.EncryptionAlgorithm} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.pbmse.EncryptionAlgorithm} value
 * @return {!proto.okapi.transport.PackRequest} returns this
 */
proto.okapi.transport.PackRequest.prototype.setAlgorithm = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.okapi.transport.PackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.okapi.transport.PackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.okapi.transport.PackResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.PackResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && pbmse_pbmse_pb.EncryptedMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.okapi.transport.PackResponse}
 */
proto.okapi.transport.PackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.okapi.transport.PackResponse;
  return proto.okapi.transport.PackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.okapi.transport.PackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.okapi.transport.PackResponse}
 */
proto.okapi.transport.PackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new pbmse_pbmse_pb.EncryptedMessage;
      reader.readMessage(value,pbmse_pbmse_pb.EncryptedMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.okapi.transport.PackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.okapi.transport.PackResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.okapi.transport.PackResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.PackResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      pbmse_pbmse_pb.EncryptedMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional pbmse.EncryptedMessage message = 1;
 * @return {?proto.pbmse.EncryptedMessage}
 */
proto.okapi.transport.PackResponse.prototype.getMessage = function() {
  return /** @type{?proto.pbmse.EncryptedMessage} */ (
    jspb.Message.getWrapperField(this, pbmse_pbmse_pb.EncryptedMessage, 1));
};


/**
 * @param {?proto.pbmse.EncryptedMessage|undefined} value
 * @return {!proto.okapi.transport.PackResponse} returns this
*/
proto.okapi.transport.PackResponse.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.okapi.transport.PackResponse} returns this
 */
proto.okapi.transport.PackResponse.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.okapi.transport.PackResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.okapi.transport.UnpackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.okapi.transport.UnpackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.okapi.transport.UnpackRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.UnpackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderKey: (f = msg.getSenderKey()) && keys_pb.JsonWebKey.toObject(includeInstance, f),
    receiverKey: (f = msg.getReceiverKey()) && keys_pb.JsonWebKey.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && pbmse_pbmse_pb.EncryptedMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.okapi.transport.UnpackRequest}
 */
proto.okapi.transport.UnpackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.okapi.transport.UnpackRequest;
  return proto.okapi.transport.UnpackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.okapi.transport.UnpackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.okapi.transport.UnpackRequest}
 */
proto.okapi.transport.UnpackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new keys_pb.JsonWebKey;
      reader.readMessage(value,keys_pb.JsonWebKey.deserializeBinaryFromReader);
      msg.setSenderKey(value);
      break;
    case 2:
      var value = new keys_pb.JsonWebKey;
      reader.readMessage(value,keys_pb.JsonWebKey.deserializeBinaryFromReader);
      msg.setReceiverKey(value);
      break;
    case 3:
      var value = new pbmse_pbmse_pb.EncryptedMessage;
      reader.readMessage(value,pbmse_pbmse_pb.EncryptedMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.okapi.transport.UnpackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.okapi.transport.UnpackRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.okapi.transport.UnpackRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.UnpackRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      keys_pb.JsonWebKey.serializeBinaryToWriter
    );
  }
  f = message.getReceiverKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      keys_pb.JsonWebKey.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      pbmse_pbmse_pb.EncryptedMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional okapi.keys.JsonWebKey sender_key = 1;
 * @return {?proto.okapi.keys.JsonWebKey}
 */
proto.okapi.transport.UnpackRequest.prototype.getSenderKey = function() {
  return /** @type{?proto.okapi.keys.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, keys_pb.JsonWebKey, 1));
};


/**
 * @param {?proto.okapi.keys.JsonWebKey|undefined} value
 * @return {!proto.okapi.transport.UnpackRequest} returns this
*/
proto.okapi.transport.UnpackRequest.prototype.setSenderKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.okapi.transport.UnpackRequest} returns this
 */
proto.okapi.transport.UnpackRequest.prototype.clearSenderKey = function() {
  return this.setSenderKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.okapi.transport.UnpackRequest.prototype.hasSenderKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional okapi.keys.JsonWebKey receiver_key = 2;
 * @return {?proto.okapi.keys.JsonWebKey}
 */
proto.okapi.transport.UnpackRequest.prototype.getReceiverKey = function() {
  return /** @type{?proto.okapi.keys.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, keys_pb.JsonWebKey, 2));
};


/**
 * @param {?proto.okapi.keys.JsonWebKey|undefined} value
 * @return {!proto.okapi.transport.UnpackRequest} returns this
*/
proto.okapi.transport.UnpackRequest.prototype.setReceiverKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.okapi.transport.UnpackRequest} returns this
 */
proto.okapi.transport.UnpackRequest.prototype.clearReceiverKey = function() {
  return this.setReceiverKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.okapi.transport.UnpackRequest.prototype.hasReceiverKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional pbmse.EncryptedMessage message = 3;
 * @return {?proto.pbmse.EncryptedMessage}
 */
proto.okapi.transport.UnpackRequest.prototype.getMessage = function() {
  return /** @type{?proto.pbmse.EncryptedMessage} */ (
    jspb.Message.getWrapperField(this, pbmse_pbmse_pb.EncryptedMessage, 3));
};


/**
 * @param {?proto.pbmse.EncryptedMessage|undefined} value
 * @return {!proto.okapi.transport.UnpackRequest} returns this
*/
proto.okapi.transport.UnpackRequest.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.okapi.transport.UnpackRequest} returns this
 */
proto.okapi.transport.UnpackRequest.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.okapi.transport.UnpackRequest.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.okapi.transport.UnpackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.okapi.transport.UnpackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.okapi.transport.UnpackResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.UnpackResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    plaintext: msg.getPlaintext_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.okapi.transport.UnpackResponse}
 */
proto.okapi.transport.UnpackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.okapi.transport.UnpackResponse;
  return proto.okapi.transport.UnpackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.okapi.transport.UnpackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.okapi.transport.UnpackResponse}
 */
proto.okapi.transport.UnpackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPlaintext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.okapi.transport.UnpackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.okapi.transport.UnpackResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.okapi.transport.UnpackResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.UnpackResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlaintext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes plaintext = 1;
 * @return {!(string|Uint8Array)}
 */
proto.okapi.transport.UnpackResponse.prototype.getPlaintext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes plaintext = 1;
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {string}
 */
proto.okapi.transport.UnpackResponse.prototype.getPlaintext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPlaintext()));
};


/**
 * optional bytes plaintext = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {!Uint8Array}
 */
proto.okapi.transport.UnpackResponse.prototype.getPlaintext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPlaintext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.okapi.transport.UnpackResponse} returns this
 */
proto.okapi.transport.UnpackResponse.prototype.setPlaintext = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.okapi.transport.CoreMessage.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.okapi.transport.CoreMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.okapi.transport.CoreMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.okapi.transport.CoreMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.CoreMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    body: msg.getBody_asB64(),
    toList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    from: jspb.Message.getFieldWithDefault(msg, 5, ""),
    created: jspb.Message.getFieldWithDefault(msg, 6, 0),
    expires: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.okapi.transport.CoreMessage}
 */
proto.okapi.transport.CoreMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.okapi.transport.CoreMessage;
  return proto.okapi.transport.CoreMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.okapi.transport.CoreMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.okapi.transport.CoreMessage}
 */
proto.okapi.transport.CoreMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTo(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreated(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpires(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.okapi.transport.CoreMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.okapi.transport.CoreMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.okapi.transport.CoreMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.transport.CoreMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getToList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCreated();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getExpires();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.okapi.transport.CoreMessage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.okapi.transport.CoreMessage} returns this
 */
proto.okapi.transport.CoreMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.okapi.transport.CoreMessage.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.okapi.transport.CoreMessage} returns this
 */
proto.okapi.transport.CoreMessage.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes body = 3;
 * @return {!(string|Uint8Array)}
 */
proto.okapi.transport.CoreMessage.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes body = 3;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.okapi.transport.CoreMessage.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.okapi.transport.CoreMessage.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.okapi.transport.CoreMessage} returns this
 */
proto.okapi.transport.CoreMessage.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated string to = 4;
 * @return {!Array<string>}
 */
proto.okapi.transport.CoreMessage.prototype.getToList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.okapi.transport.CoreMessage} returns this
 */
proto.okapi.transport.CoreMessage.prototype.setToList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.okapi.transport.CoreMessage} returns this
 */
proto.okapi.transport.CoreMessage.prototype.addTo = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.okapi.transport.CoreMessage} returns this
 */
proto.okapi.transport.CoreMessage.prototype.clearToList = function() {
  return this.setToList([]);
};


/**
 * optional string from = 5;
 * @return {string}
 */
proto.okapi.transport.CoreMessage.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.okapi.transport.CoreMessage} returns this
 */
proto.okapi.transport.CoreMessage.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 created = 6;
 * @return {number}
 */
proto.okapi.transport.CoreMessage.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.okapi.transport.CoreMessage} returns this
 */
proto.okapi.transport.CoreMessage.prototype.setCreated = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 expires = 7;
 * @return {number}
 */
proto.okapi.transport.CoreMessage.prototype.getExpires = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.okapi.transport.CoreMessage} returns this
 */
proto.okapi.transport.CoreMessage.prototype.setExpires = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


goog.object.extend(exports, proto.okapi.transport);
