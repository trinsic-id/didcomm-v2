name: Build Platform Libraries

on:
  workflow_dispatch:
  pull_request:
  release:
    types: [published, prereleased]

jobs:
  # build_windows:
  #   name: Windows
  #   if: "! contains(github.event.head_commit.message, '[skip ci]')"
  #   runs-on: windows-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v1
  #       with:
  #         submodules: "true"
  #     - name: Run build script
  #       run: ../devops/Build.ps1 -Platform Windows -OutLocation ../libs/windows
  #       working-directory: native
  #       shell: pwsh
  #     - name: Upload Windows artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: windows
  #         path: ./libs/windows/*

  # build_linux:
  #   name: Linux
  #   if: "! contains(github.event.head_commit.message, '[skip ci]')"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v1
  #       with:
  #         submodules: "true"

  #     - name: Run build script
  #       run: ../devops/Build.ps1 -Platform Linux -OutLocation ../libs/linux
  #       shell: pwsh
  #       working-directory: native
  #     - name: Upload Linux artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: linux
  #         path: ./libs/linux/*

  build_macos:
    name: MacOS
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: "true"

      # - name: Run build script
      #   run: ../devops/Build.ps1 -Platform MacOS -OutLocation ../libs/macos
      #   shell: pwsh
      #   working-directory: native
      - name: Upload secret
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_DEVELOPER_ID_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_DEVELOPER_ID_CERTIFICATE_PWD }}
        run: |
          [System.IO.File]::WriteAllBytes($pwd.Path+"/certificate.p12", [System.Convert]::FromBase64String("$env:MACOS_CERTIFICATE"))
        shell: pwsh
      - name: Upload MacOS artifact
        uses: actions/upload-artifact@v2
        with:
          name: cert
          path: ./certificate.p12
      - name: Codesign dynamic library
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_DEVELOPER_ID_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_DEVELOPER_ID_CERTIFICATE_PWD }}
        run: |
          $env:TMP_PASS="tmp_pass"
          [System.IO.File]::WriteAllBytes($pwd.Path+"/certificate.p12", [System.Convert]::FromBase64String("$env:MACOS_CERTIFICATE"))
          security create-keychain -p $env:TMP_PASS build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $env:TMP_PASS build.keychain
          security list-keychains -s build.keychain
          security import certificate.p12 -k build.keychain -P $env:MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $env:TMP_PASS build.keychain
          /usr/bin/codesign --force -s AEFB3DDA9FD6A31D3DD4D7A9398A59FDDA874DCC libokapy.dylib -v
        shell: pwsh
        working-directory: ./libs/macos
      - name: Upload MacOS artifact
        uses: actions/upload-artifact@v2
        with:
          name: macos
          path: ./libs/macos/*.dylib

  # build_ios:
  #   name: iOS
  #   if: "! contains(github.event.head_commit.message, '[skip ci]')"
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v1
  #       with:
  #         submodules: "true"

  #     - name: Run build script
  #       run: ../devops/Build.ps1 -Platform iOS -OutLocation ../libs/ios
  #       shell: pwsh
  #       working-directory: native
  #     - name: Upload iOS artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ios
  #         path: ./libs/ios/*

  # build_android:
  #   name: Android
  #   if: "! contains(github.event.head_commit.message, '[skip ci]')"
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v1
  #       with:
  #         submodules: "true"

  #     - name: Run build script
  #       run: ../devops/Build.ps1 -Platform Android -OutLocation ../libs/android -AndroidNdkHome ~/Library/Developer/Xamarin/android-ndk/
  #       shell: pwsh
  #       working-directory: native
  #     - name: Upload Android artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: android
  #         path: ./libs/android/*

  package_nuget:
    name: Package Nuget
    runs-on: macos-latest
    needs: [build_macos]
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: "true"

      - uses: actions/download-artifact@v2
        with:
          path: ./libs
      - name: Generate Package Version
        run: |
          $packageVersion = node -p -e "require('./package.json').version"
          $manualVersion = "${{ github.event.release.tag_name }}"
          $version = if ($manualVersion) { $manualVersion } else { $packageVersion }
          $version = $version.TrimStart("v")

          echo "PACKAGE_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf-8 -Append
        shell: pwsh

      - name: Create Nuget package
        run: msbuild /t:restore,pack /p:Configuration=Release /p:PackageVersion=$env:PACKAGE_VERSION
        shell: pwsh
        working-directory: ./dotnet/Library/Okapi

      - name: Upload nuget artifact
        uses: actions/upload-artifact@v2
        with:
          name: package-nuget
          path: |
            ./dotnet/Library/Okapi/bin/Release/*.nupkg
            ./dotnet/Library/Okapi/bin/Release/*.snupkg

  publish_nuget:
    name: Publish Nuget
    if: |
      github.event_name == 'release' &&
      github.event.action == 'published' &&
      github.release.draft == false &&
      github.release.prerelease == false
    runs-on: windows-latest
    needs: [package_nuget]
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: ./nuget
      - name: Push packages to Nuget
        run: |
          foreach ($item in get-childitem ./nuget -recurse | select-object FullName | where { $_.FullName.EndsWith("nupkg") })
          {
            nuget push $item.FullName -ApiKey "${{ secrets.NUGET_API_KEY }}" -Source https://api.nuget.org/v3/index.json -SkipDuplicate
          }
        shell: pwsh
